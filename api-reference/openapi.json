{
  "openapi": "3.0.1",
  "info": {
    "title": "Edgee endpoints",
    "version": "1"
  },
  "servers": [
    {
      "url": "https://api.edgee.dev"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/api_tokens": {
      "get": {
        "summary": "List all ApiTokens",
        "description": "Returns a list of your ApiTokens. The ApiTokens are returned sorted by creation date, with the most recent ApiTokens appearing first.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListParams"
                  }
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the organization."
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "A list of ApiTokens",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListParams"
                    }
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ApiToken"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new ApiToken",
        "description": "Creates a new ApiToken. The ApiToken is returned, including its `token` field, which you should record for future reference. **Be careful, this token is only returned once, when the token is created.**",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenCreateInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created ApiToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiToken"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/api_tokens/{id}": {
      "get": {
        "summary": "Get an ApiToken",
        "description": "Retrieve an ApiToken that has previously been created.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ApiToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiToken"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an ApiToken",
        "description": "Delete an ApiToken that has previously been created. Once deleted, the ApiToken can no longer be used to authenticate requests.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted ApiToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },

    "/v1/organizations": {
      "get": {
        "summary": "List all Organizations",
        "description": "Returns a list of your Organizations. The Organizations are returned sorted by creation date, with the most recent Organizations appearing first.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListParams"
                  }
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the organization."
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the organization.",
                    "enum": ["perso", "pro"]
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "A list of Organizations",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListResponse"
                    }
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Organization",
        "description": "Creates a new Organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreateInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/me": {
      "get": {
        "summary": "Get my Organization",
        "description": "Retrieve my Organization personal organization.",
        "responses": {
          "200": {
            "description": "The retrieved Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an Organization",
        "description": "Deletes an existing Organization.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/{id}": {
      "get": {
        "summary": "Get an Organization",
        "description": "Retrieve an Organization that has previously been created.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update an Organization",
        "description": "Updates an existing Organization.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdateInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an Organization",
        "description": "Deletes an existing Organization.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },

    "/v1/projects": {
      "get": {
        "summary": "List all Projects",
        "description": "Returns a list of your Projects. The Projects are returned sorted by creation date, with the most recent Project appearing first.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListParams"
                  }
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the project."
                  },
                  "organization_id": {
                    "type": "string",
                    "description": "The organization ID."
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "A list of Projects",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListResponse"
                    }
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Projects",
        "description": "Creates a new Projects.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/projects/{id}": {
      "get": {
        "summary": "Get a Project",
        "description": "Retrieve a Project that has previously been created.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update a Project",
        "description": "Updates an existing Project.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdateInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Project",
        "description": "Deletes an existing Project.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },

    "/v1/users/me": {
      "get": {
        "summary": "Get my User object",
        "description": "Retrieves my current User object.",
        "responses": {
          "200": {
            "description": "Your User object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{id}": {
      "get": {
        "summary": "Get a User",
        "description": "Retrieve a User that has previously been created.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiToken": {
        "type": "object",
        "description": "An ApiToken is a unique identifier that you can use to authenticate requests to the API. You can create as many ApiTokens as you need.",
        "properties": {
          "id": {
            "type": "string",
            "description": "This is the internal ID for this ApiToken. You don’t need to record this information, since you will not need to use it.",
            "readOnly": true
          },
          "object": {
            "type": "string",
            "description": "String representing the object’s type. Objects of the same type share the same value.",
            "readOnly": true,
            "example": "api_token"
          },
          "user_id": {
            "type": "string",
            "description": "The ID of the user that created this ApiToken.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the ApiToken."
          },
          "from_browser": {
            "type": "boolean",
            "description": "Whether this ApiToken was created from the browser.",
            "readOnly": true
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last time this ApiToken was used.",
            "readOnly": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time this ApiToken expires."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the object was created.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the object was last updated.",
            "readOnly": true
          },
          "token": {
            "type": "string",
            "description": "The actual token that you will use to authenticate your requests. > **Be careful, this token is only returned once, when the token is created.**",
            "readOnly": true
          }
        }
      },
      "ApiTokenCreateInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiToken"
          }
        ],
        "required": ["name"]
      },

      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the organization.",
            "readOnly": true
          },
          "object": {
            "type": "string",
            "description": "String representing the object’s type. Objects of the same type share the same value.",
            "readOnly": true,
            "example": "organization"
          },
          "name": {
            "type": "string",
            "description": "The name of the organization."
          },
          "slug": {
            "type": "string",
            "description": "The slug of the organization."
          },
          "avatar_url": {
            "type": "string",
            "description": "Avatar URL of the organization",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of the organization.",
            "enum": ["perso", "pro"]
          },
          "current_billing_plan": {
            "type": "string",
            "description": "The current billing plan of the organization."
          },
          "card_brand": {
            "type": "string",
            "description": "The brand of the card used to pay the current billing plan.",
            "readOnly": true
          },
          "card_last_four": {
            "type": "string",
            "description": "The last 4 digits of the card used to pay the current billing plan.",
            "readOnly": true
          },
          "card_expiration_month": {
            "type": "string",
            "description": "The expiration month of the card used to pay the current billing plan.",
            "readOnly": true
          },
          "card_expiration_year": {
            "type": "string",
            "description": "The expiration year of the card used to pay the current billing plan.",
            "readOnly": true
          },
          "card_country": {
            "type": "string",
            "description": "The country of the card used to pay the current billing plan.",
            "readOnly": true
          },
          "billing_address": {
            "type": "string",
            "description": "The billing address of the organization."
          },
          "billing_address_line2": {
            "type": "string",
            "description": "The billing address line 2 of the organization."
          },
          "billing_city": {
            "type": "string",
            "description": "The billing city of the organization."
          },
          "billing_state": {
            "type": "string",
            "description": "The billing state of the organization."
          },
          "billing_zip": {
            "type": "string",
            "description": "The billing zip of the organization."
          },
          "billing_country": {
            "type": "string",
            "description": "The billing country of the organization."
          },
          "vat_id": {
            "type": "string",
            "description": "The VAT ID of the organization."
          },
          "extra_billing_information": {
            "type": "string",
            "description": "The extra billing information of the organization."
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date at which the trial ends.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the object was created.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the object was last updated.",
            "readOnly": true
          }
        }
      },
      "OrganizationCreateInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Organization"
          }
        ],
        "required": ["name", "slug", "type"]
      },
      "OrganizationUpdateInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Organization"
          }
        ],
        "required": ["id"]
      },

      "Project": {
        "type": "object",
        "description": "A Project is a unique identifier that you can use to manage and organize your work. Each project belongs to an organization.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the project",
            "readOnly": true
          },
          "object": {
            "type": "string",
            "description": "String representing the object's type. Objects of the same type share the same value",
            "example": "project",
            "readOnly": true
          },
          "organization_id": {
            "type": "string",
            "description": "Unique identifier for the organization the project belongs to",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "name": {
            "type": "string",
            "description": "Name of the project",
            "example": "My Project"
          },
          "slug": {
            "type": "string",
            "description": "URL-friendly string that identifies the project",
            "example": "my-project"
          },
          "avatar_url": {
            "type": "string",
            "description": "Avatar URL of the project",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description of the project",
            "example": "This is my project"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the project was created",
            "example": "2022-03-01T00:00:00Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the project was last updated",
            "example": "2022-03-01T00:00:00Z",
            "readOnly": true
          }
        }
      },
      "ProjectCreateInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Project"
          }
        ],
        "required": ["organization_id", "name", "slug"]
      },
      "ProjectUpdateInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Project"
          }
        ],
        "required": ["id"]
      },

      "User": {
        "type": "object",
        "description": "A User is a unique identifier that you can use to manage and organize your work.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the user",
            "readOnly": true
          },
          "object": {
            "type": "string",
            "description": "String representing the object's type. Objects of the same type share the same value",
            "example": "user",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "description": "Email of the user",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the project was created",
            "example": "2022-03-01T00:00:00Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the project was last updated",
            "example": "2022-03-01T00:00:00Z",
            "readOnly": true
          }
        }
      },

      "ListParams": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "A limit on the number of objects to be returned."
          },
          "starting_after": {
            "type": "string",
            "description": "A cursor for use in pagination. `ending_before` parameter defines the place in the list for your subsequent calls. For instance, if you make a list request and receive 100 objects, the last one (the oldest) having `2023-02-20T00:00:00Z` as its creation date, you can make a subsequent call with `ending_before=2023-02-20T00:00:00Z` in order to fetch the next page of the list."
          },
          "ending_before": {
            "type": "string",
            "description": "A cursor for use in pagination. `starting_after` parameter defines the place in the list for your subsequent calls. For instance, if you make a list request and receive 100 objects, the first one (the newest) having `2023-02-20T00:00:00Z` as its creation date, you can make a subsequent call with `starting_after=2023-02-20T00:00:00Z` in order to fetch the previous page of the list."
          },
          "order_direction": {
            "type": "string",
            "description": "The order direction of the returned list. Objects are returned sorted by creation date. By default, the order is descending, so the most recent object appears first. Possible values are ASC and DESC. Default is DESC.",
            "enum": ["ASC", "DESC"],
            "default": "DESC"
          }

        }
      },
      "ListResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object’s type. Objects of the same type share the same value.",
            "readOnly": true,
            "example": "list"
          },
          "url": {
            "type": "string",
            "description": "The URL where this list can be accessed.",
            "readOnly": true
          },
          "has_more": {
            "type": "boolean",
            "description": "Whether there are more objects beyond the ones returned. You can use it to decide whether to show the user a “load more” button, for example."
          }
        }
      },
      "DeletedResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "This is the internal ID for this object. You don’t need to record this information, since you will not need to use it."
          },
          "object": {
            "type": "string",
            "description": "String representing the object’s type. Objects of the same type share the same value."
          },
          "deleted": {
            "type": "boolean",
            "description": "If the object has been deleted, the value is true. If the object has not been deleted, the value is false."
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "An error response from the API. More info [here]('/docs/api-reference/errors')",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["invalid_request_error", "not_found_error", "creation_error", "update_error", "deletion_error", "forbidden_error", "authentication_error"],
                "default": "invalid_request_error",
                "description": "The type of error returned."
              },
              "message": {
                "type": "string",
                "description": "A human-readable message providing more details about the error.",
                "example": "Parameter error."
              },
              "params": {
                "type": "array",
                "description": "The specific request parameters associated with the error. May be omitted if the error message is generic enough to apply to multiple parameters.",
                "items": {
                  "type": "object",
                  "properties": {
                    "param": {
                      "type": "string",
                      "description": "The parameter related to the error.",
                      "example": "name"
                    },
                    "message": {
                      "type": "string",
                      "description": "A human-readable message providing more details about the error.",
                      "example": "Name is required."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Bearer authentication header of the form `Bearer <token>`, where `<token>` is your auth token. More info [here]('/docs/api-reference/authentication')"
      }
    }
  }
}
